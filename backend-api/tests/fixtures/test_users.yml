# 用户测试配置文件
# 用于定义真实的测试用户数据

# 测试环境配置
test_config:
  # 测试数据库配置
  database:
    type: 'sqlite3'
    dsn: ':memory:' # 使用内存数据库进行测试

  # JWT配置
  jwt:
    secret: 'test-secret-key'
    expires_hours: 24

  # 邮件服务配置（测试环境）
  email:
    enabled: false # 测试环境禁用真实邮件发送
    mock_code: '123456' # 模拟验证码

# 测试用户组
user_groups:
  # 正常用户组
  normal_users:
    - name: 'alice'
      email: 'alice@example.com'
      username: 'alice_user'
      password: 'AlicePass123!'
      is_active: true
      description: '正常活跃用户'

    - name: 'bob'
      email: 'bob@example.com'
      username: 'bob_user'
      password: 'BobPass456!'
      is_active: true
      description: '正常活跃用户'

    - name: 'charlie'
      email: 'charlie@example.com'
      username: 'charlie_user'
      password: 'CharliePass789!'
      is_active: false
      description: '未激活用户'

  # 边界测试用户组
  edge_case_users:
    - name: 'long_username_user'
      email: 'long@example.com'
      username: 'very_long_username_that_exceeds_normal_length_limits'
      password: 'LongPass123!'
      is_active: true
      description: '超长用户名测试'

    - name: 'special_chars_user'
      email: 'special@example.com'
      username: 'user@#$%^&*()'
      password: 'SpecialPass123!'
      is_active: true
      description: '特殊字符用户名测试'

    - name: 'unicode_user'
      email: 'unicode@example.com'
      username: '用户中文名'
      password: 'UnicodePass123!'
      is_active: true
      description: 'Unicode字符用户名测试'

  # 错误测试用户组
  error_test_users:
    - name: 'invalid_email_user'
      email: 'invalid-email'
      username: 'invalid_email'
      password: 'InvalidPass123!'
      is_active: true
      description: '无效邮箱格式测试'

    - name: 'weak_password_user'
      email: 'weak@example.com'
      username: 'weak_password'
      password: '123'
      is_active: true
      description: '弱密码测试'

    - name: 'empty_fields_user'
      email: ''
      username: ''
      password: ''
      is_active: true
      description: '空字段测试'

# 测试场景配置
test_scenarios:
  # 用户注册场景
  registration:
    - name: '正常注册流程'
      description: '测试完整的用户注册流程'
      steps:
        - step: '发送验证码'
          endpoint: '/user/send-code'
          method: 'POST'
          body:
            email: 'newuser@example.com'
          expected:
            code: 200
            message: '验证码已发送'

        - step: '注册用户（验证码错误）'
          endpoint: '/user/register'
          method: 'POST'
          body:
            email: 'newuser@example.com'
            username: 'newuser'
            password: 'NewPass123!'
            confirmPassword: 'NewPass123!'
            code: '000000'
          expected:
            code: 400
            message: '验证码无效或已过期'

    - name: '重复邮箱注册'
      description: '测试使用已存在邮箱注册'
      steps:
        - step: '使用已存在邮箱注册'
          endpoint: '/user/register'
          method: 'POST'
          body:
            email: 'alice@example.com'
            username: 'alice_duplicate'
            password: 'DuplicatePass123!'
            confirmPassword: 'DuplicatePass123!'
            code: '000000'
          expected:
            code: 400
            message: '验证码无效或已过期'

  # 用户登录场景
  login:
    - name: '正常登录流程'
      description: '测试用户正常登录'
      steps:
        - step: '用户登录'
          endpoint: '/user/login'
          method: 'POST'
          body:
            username: 'alice_user'
            password: 'AlicePass123!'
          expected:
            code: 200
            contains: 'accessToken'

    - name: '错误密码登录'
      description: '测试使用错误密码登录'
      steps:
        - step: '错误密码登录'
          endpoint: '/user/login'
          method: 'POST'
          body:
            username: 'alice_user'
            password: 'WrongPassword123!'
          expected:
            code: 401
            message: '用户名或密码错误'

# 测试数据清理配置
cleanup:
  # 测试完成后是否清理数据
  enabled: true

  # 清理策略
  strategy: 'delete_all' # 可选: delete_all, delete_test_only, keep_all

  # 清理的数据类型
  data_types:
    - 'users'
    - 'tokens'
    - 'logs'
